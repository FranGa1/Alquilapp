<div class="mb-10vh mt-10vh d-flex justify-content-center">
    <div class="d-flex flex-column " style="width:80%">
        <h4 class="p-2 align-self-start">Tu alquiler, <%=current_user.first_name %></h4>
        <div class="card align-self-center" style="width: 16rem;">
            <%if @auto.imagen.attached?%>
                <%= image_tag(@auto.imagen) %></td>
            <%else%>
                <label>Sin Foto</label>
            <%end%>
            <div class="card-body">
                <h5 class="card-title"><%=@auto.modelo%> <%=@auto.anio%></h5>
                <p class="card-text"><%=@auto.patente%></p>
            </div>
        </div>
        <div class="mt-4">
            <h5>Tiempo restante:</h5>
                <h4><div class="text-center pt-2 bold" id="countdown" style="color: #DC3545"></div></h4>
        </div>

        <div id="small_map" style="height:15vh; width:100%"></div>

        <div class="container map-bottom text-center" id="botones">
            <div class="row">

                <div class="col">
                    <button type="button" class="btn btn-success rounded-5">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-patch-check me-1 mb-1 ms-2" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M10.354 6.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7 8.793l2.646-2.647a.5.5 0 0 1 .708 0z"/>
                            <path d="m10.273 2.513-.921-.944.715-.698.622.637.89-.011a2.89 2.89 0 0 1 2.924 2.924l-.01.89.636.622a2.89 2.89 0 0 1 0 4.134l-.637.622.011.89a2.89 2.89 0 0 1-2.924 2.924l-.89-.01-.622.636a2.89 2.89 0 0 1-4.134 0l-.622-.637-.89.011a2.89 2.89 0 0 1-2.924-2.924l.01-.89-.636-.622a2.89 2.89 0 0 1 0-4.134l.637-.622-.011-.89a2.89 2.89 0 0 1 2.924-2.924l.89.01.622-.636a2.89 2.89 0 0 1 4.134 0l-.715.698a1.89 1.89 0 0 0-2.704 0l-.92.944-1.32-.016a1.89 1.89 0 0 0-1.911 1.912l.016 1.318-.944.921a1.89 1.89 0 0 0 0 2.704l.944.92-.016 1.32a1.89 1.89 0 0 0 1.912 1.911l1.318-.016.921.944a1.89 1.89 0 0 0 2.704 0l.92-.944 1.32.016a1.89 1.89 0 0 0 1.911-1.912l-.016-1.318.944-.921a1.89 1.89 0 0 0 0-2.704l-.944-.92.016-1.32a1.89 1.89 0 0 0-1.912-1.911l-1.318.016z"/>
                        </svg>
                        <%= link_to "Certificado", "/users/certificado", style: "text-decoration: none; color: white", class: "me-2"%>
                    </button>
                </div>

                <div class="col">
                    <button type="button" class="btn btn-danger rounded-5 me-1" data-bs-toggle="modal" data-bs-target="#exampleModal">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle me-1 mb-1 ms-4" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                        </svg>
                        <span class="me-3">Finalizar</span>
                    </button>
                </div>
            </div>
        </div>

        
    </div>


</div>

<!--MODAL-->
<div class="modal fade mt-5" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Finalizar alquiler</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body m-2">
        <p>¿Está seguro que desea finalizar el alquiler del <strong><%=@auto.modelo%></strong>?</p>
        </div>
        <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <%= button_to "Finalizar", "/users/finalizar_alquiler", method: :put, class:"btn btn-danger"%>
        </div>
    </div>
    </div>
</div>

<style>
    .container-in{
        background-color: #f5f5f5;
        text-align: center;
    }

    .mostrar{
        font-family: 'Roboto', sans-serif;
        text-align: left;
        font-weight: 500;
    }

    h1{
        font-weight: 600;
        font-size: 2rem;
    }

    p{
        font-size: 1rem;
    }

    label{
        font-weight: bolder;
        font-size: 1.1rem;
    }

    .boton{
        width: 23rem;

    }
    .orange-light-hr{
        border-top: 3px solid #ff8c00;
        rounded: 5px;
        padding: 0;
        margin: 0;
        width: 40%;
        /* center hr */
        margin-left: auto;
        margin-right: auto;
    }
</style>


<script>

    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(getMap);
    }

    function getMap(pos) {
        user_lat = pos.coords.latitude;
        user_lon = pos.coords.longitude;
        console.log(user_lat);
        console.log(user_lon);

      var map = new ol.Map({
        target: 'small_map',
        layers: [
            new ol.layer.Tile({
            source: new ol.source.OSM()
            })
        ],
        view: new ol.View({
            center: ol.proj.fromLonLat([ <%= @auto.location_point.y %>, <%= @auto.location_point.x %> ]),
            zoom: 16
        })
        });



        // remove + and - buttons
        map.getControls().forEach(function(control) {
            if (control instanceof ol.control.Zoom) {
                map.removeControl(control);
            }
        });

        // save map on local storage to be able to use it later
        // localStorage.setItem("map", map);



        // marker of the user with a blue circle
        var user_marker = new ol.Feature({
            geometry: new ol.geom.Point(
                ol.proj.fromLonLat([user_lon, user_lat])
            ),  // Cordinates of New York's Town Hall
        });

        var user_marker_style = new ol.style.Style({
            image: new ol.style.Circle({
                radius: 8,
                fill: new ol.style.Fill({color: 'blue'}),
                stroke: new ol.style.Stroke({
                    color: 'white', width: 2
                })
            })
        });

        user_marker.setStyle(user_marker_style);

        var vectorSource = new ol.source.Vector({
            features: [user_marker]
        });

        var user_marker_vectorLayer = new ol.layer.Vector({
            source: vectorSource,
        });

        map.addLayer(user_marker_vectorLayer);

        // localStorage

        // for each auto, add a marker with the auto's location and a popup with the auto's info when clicked on the marker

        var auto_marker = new ol.Feature({
            geometry: new ol.geom.Point(
                ol.proj.fromLonLat([<%= @auto.location_point.y %>, <%= @auto.location_point.x %>])
            ),  // Cordinates of New York's Town Hall
        });

        var auto_marker_style = new ol.style.Style({
            image: new ol.style.Icon({
                anchor: [0.5, 0.5],
                anchorXUnits: 'fraction',
                anchorYUnits: 'fraction',
                src: 'https://toppng.com/uploads/preview/car-top-view-icon-car-top-view-11563579995rzzpegrkhe.png',
                scale: 0.03
            })
        });

        auto_marker.setStyle(auto_marker_style);

        var vectorSource = new ol.source.Vector({
            features: [auto_marker]
        });

        var auto_marker_vectorLayer = new ol.layer.Vector({
            source: vectorSource,
        });

        map.addLayer(auto_marker_vectorLayer);


        // add a marker with the user's location and a popup with the user's info when clicked on the marker
        var user_marker = new ol.Feature({
            geometry: new ol.geom.Point(
                ol.proj.fromLonLat([user_lon, user_lat])
            ),  // Cordinates of New York's Town Hall
        });

        var user_marker_style = new ol.style.Style({
            image: new ol.style.Circle({
                radius: 8,
                fill: new ol.style.Fill({color: 'blue'}),
                stroke: new ol.style.Stroke({
                    color: 'white', width: 2
                })
            })
        });

        user_marker.setStyle(user_marker_style);

        var vectorSource = new ol.source.Vector({
            features: [user_marker]
        });

        var user_marker_vectorLayer = new ol.layer.Vector({
            source: vectorSource,
        });

        map.addLayer(user_marker_vectorLayer);
    }

</script>



<script>
    // function that given a month number return the first three letters of the month
    function getMonthName(monthNumber) {
        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        ];
        return monthNames[monthNumber-1];
    }

   // Set the date we're counting down to
   var month = <%= @alquiler.fecha_devolucion.month %>
    var day = "<%= @alquiler.fecha_devolucion.day %>"
    var year = "<%= @alquiler.fecha_devolucion.year %>"

    var countDownDate = new Date(`${getMonthName(month)} ${day}, ${year} <%= @tiempo_fin %>`).getTime();
    // Update the count down every 1 second
    var x = setInterval(function() {

        // Get today's date and time
        var now = new Date().getTime();
        // format and display now


        // Find the distance between now and the count down date
        var distance = countDownDate - now;


        // Time calculations for days, hours, minutes and seconds
        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Display the result in the element with id="demo"
        document.getElementById("countdown").innerHTML =  days + "d " +  hours + "h "
        + minutes + "m " + seconds + "s ";

        // If the count down is finished, write some text
        if (distance < 0) {
            clearInterval(x);
            document.getElementById("countdown").innerHTML = "Tiempo finalizado";
        }
    }, 1000);

</script>